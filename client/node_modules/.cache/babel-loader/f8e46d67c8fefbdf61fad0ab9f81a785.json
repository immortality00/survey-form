{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyDAhNzNIqFv4RoW1tdG8XgkC_zeifeC5rU\",\n  authDomain: \"survey-form-2c6a2.firebaseapp.com\",\n  databaseURL: \"https://survey-form-2c6a2.firebaseio.com\",\n  projectId: \"survey-form-2c6a2\",\n  storageBucket: \"survey-form-2c6a2.appspot.com\",\n  messagingSenderId: \"1090594241364\",\n  appId: \"1:1090594241364:web:a5c4b0a240c5bbe04d26c1\",\n  measurementId: \"G-MBTNG25BTV\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const getUserCartRef = async userId => {\n  const cartsRef = firestore.collection(\"carts\").where(\"userId\", \"==\", userId);\n  const snapShot = await cartsRef.get();\n\n  if (snapShot.empty) {\n    const cartDocRef = firestore.collection(\"carts\").doc();\n    await cartDocRef.set({\n      userId,\n      cartItems: []\n    });\n    return cartDocRef;\n  } else {\n    return snapShot.docs[0].ref;\n  }\n};\nexport const AddItems = async (collectionKey, objectsToAdd) => {\n  const collections = firestore.collection(\"collections\");\n  collections.doc(collectionKey).set(objectsToAdd).then(function () {\n    console.log(\"Document Added\");\n  }).catch(function (error) {\n    console.log(\"error adding the document: \", error);\n  });\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const TransformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return TransformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const storge = firebase.storage();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/immortality00/Desktop/survey-form/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","getUserCartRef","userId","cartsRef","collection","where","empty","cartDocRef","cartItems","docs","ref","AddItems","collectionKey","objectsToAdd","collections","then","catch","addCollectionAndDocuments","collectionRef","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","TransformedCollection","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","storge","storage","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nconst config = {\n  apiKey: \"AIzaSyDAhNzNIqFv4RoW1tdG8XgkC_zeifeC5rU\",\n  authDomain: \"survey-form-2c6a2.firebaseapp.com\",\n  databaseURL: \"https://survey-form-2c6a2.firebaseio.com\",\n  projectId: \"survey-form-2c6a2\",\n  storageBucket: \"survey-form-2c6a2.appspot.com\",\n  messagingSenderId: \"1090594241364\",\n  appId: \"1:1090594241364:web:a5c4b0a240c5bbe04d26c1\",\n  measurementId: \"G-MBTNG25BTV\",\n};\n\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n  return userRef;\n};\n\nexport const getUserCartRef = async (userId) => {\n  const cartsRef = firestore.collection(\"carts\").where(\"userId\", \"==\", userId);\n  const snapShot = await cartsRef.get();\n  if (snapShot.empty) {\n    const cartDocRef = firestore.collection(\"carts\").doc();\n    await cartDocRef.set({ userId, cartItems: [] });\n    return cartDocRef;\n  } else {\n    return snapShot.docs[0].ref;\n  }\n};\n\nexport const AddItems = async (collectionKey, objectsToAdd) => {\n  const collections = firestore.collection(\"collections\");\n  collections\n    .doc(collectionKey)\n    .set(objectsToAdd)\n    .then(function () {\n      console.log(\"Document Added\");\n    })\n    .catch(function (error) {\n      console.log(\"error adding the document: \", error);\n    });\n};\n\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach((obj) => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const TransformedCollection = collections.docs.map((doc) => {\n    const { title, items } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items,\n    };\n  });\n  return TransformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const storge = firebase.storage();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}